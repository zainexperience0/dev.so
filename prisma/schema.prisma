// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  emailVisible  Boolean      @default(false)
  showInMembers Boolean      @default(true)
  image         String?
  accounts      Account[]
  communities   Community[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum communityType {
  PUBLIC
  PRIVATE
}

enum Theme {
  DARK
  LIGHT
}

model Community {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  name                 String        @unique
  type                 communityType @default(PUBLIC)
  color                String?
  logo                 String?
  position             Int
  coverImage           String?
  theme                Theme @default(DARK)
  icon                 String?
  inviteCode           String
  enableFeed           Boolean       @default(true)
  enableGettingStarted Boolean       @default(true)
  url                  String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}